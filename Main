/*
Pin Connections
---------------
Sensor    LaunchPad   Comment
VCC       3V3
GND       GND
OUT       2           Output is square wave
S2        3           Photodiode type selection
S3        4           Photodiode type selection
OE        11          Output enable (active low)
S1        12          Output frequency scaling selection
S0        13          Output frequency scaling selection
 
Selectable options
------------------
S0    S1    Output Frequency Scaling
L     L     Power down
L     H     2%
H     L     20%    
H     H     100%

Note: According to the datasheet, scaled-down outputs may be used where
a slower frequency counter is available. The pulseIn() functions seems
to work OK on the MSP432 with frequency scaling set at 20%.

s2    S3    Photodiode type selected
L     L     Red
L     H     Blue
H     L     Clear (no filter)
H     H     Green 
*/

#include <msp430.h>
#include <driverlib.h> 
#include <Servo.h>

// pin declarations
char outPin = 2;
char S2 = 3;
char S3 = 4;
char OEPin = 11;
char S1 = 12;
char S0 = 13;
char LED_ROJO = 6;
char LED_VERDE = 7;
char LED_AZUL = 8;
char sensor = 9;

bool flag_rojo=0;
bool flag_azul=0;
bool flag_verde=0;
//servos
Servo servo_1;
Servo servo_2;

// constants - adjust if getting poor readings
const int Rc = 100;                      // Clear Relative Responsivity 
const int Rr = 99;                       // Red Relative Responsivity 
const int Rg = 65;                       // Green Relative Responsivity 
const int Rb = 70;                       // Blue Relative Responsivity 

void setup()
{
  Serial.begin(9600);
  pinMode(outPin, INPUT);               
  pinMode(OEPin, OUTPUT);
  digitalWrite(OEPin, LOW);              // Enable frequency scaling
  pinMode(S0, OUTPUT);
  pinMode(S1, OUTPUT);
  //arranca apagado hasta que detecte una caja
  digitalWrite(S0, LOW);                // set frequency scaling of sensor
  digitalWrite(S1, LOW);                 // set frequency scaling of sensor
  pinMode(S2, OUTPUT);            
  pinMode(S3, OUTPUT);            
  pinMode(LED_ROJO, OUTPUT);              // R on RGB LED of MSP432
  pinMode(LED_VERDE, OUTPUT);            // G on RGB LED of MSP432
  pinMode(LED_AZUL, OUTPUT);             // B on RGB LED of MSP432
}

void loop()
{
  //------------------ Read raw values and correct them ----------------------
  digitalWrite(S2, HIGH);                // get ready to read clear
  digitalWrite(S3, LOW);
  int cPulse = pulseIn(outPin, LOW);     // read clear      
  int Ac = cPulse * Rc;                  // adjust reading for responsiveness
  
  digitalWrite(S2, LOW);                 // get ready to read red
  digitalWrite(S3, LOW);
  int rPulse = pulseIn(outPin, LOW);     // read red    
  int Ar = rPulse * Rr;                  // adjust reading for responsiveness
  int Cr = Ar - Ac;                      // correct for clear reading
  
  digitalWrite(S2, HIGH);                // get ready to read green
  digitalWrite(S3, HIGH);
  int gPulse = pulseIn(outPin, LOW);     // read green
  int Ag = gPulse * Rg;                  // adjust reading for responsiveness                  
  int Cg = Ag - Ac;                      // correct for clear reading
    
  digitalWrite(S2, LOW);                 // get ready to read blue
  digitalWrite(S3, HIGH);
  int bPulse = pulseIn(outPin, LOW);     // read blue
  int Ab = bPulse * Rb;                  // adjust reading for responsiveness
  int Cb = Ab - Ac;                      // correct for clear reading


color(Cg,Cr,Cb);
  delay(1000);  
}


void color  (int Cg, int Cr, int Cb) {
if (Cr < Cg && Cr < Cb)                //   rojo
  {
  digitalWrite(LED_ROJO, HIGH);
  digitalWrite(LED_VERDE, LOW);
  digitalWrite(LED_AZUL, LOW);
  flag_rojo=1;
  }
  else if (Cg < Cr && Cg < Cb)           //   verde
  {
  digitalWrite(LED_ROJO, LOW);
  digitalWrite(LED_VERDE, HIGH);
  digitalWrite(LED_AZUL, LOW);
  flag_verde=1;
  }  
  else if (Cb < Cr && Cb < Cg)           //   azul
  {
  digitalWrite(LED_ROJO, LOW);
  digitalWrite(LED_VERDE, LOW);
  digitalWrite(LED_AZUL, HIGH);
  flag_azul=1;
  }  
}//fin funcion color

void servos (void){

if (flag_azul==1){
servo_1.write(45);    
}
else if (flag_rojo==1){
servo_1.write(90);
}
else if (flag_verde==1){
servo_1.write(135);
}
servo_2.write(0);
delay(2000);
servo_2.write(90);
  __bis_SR_register(LPM0_bits + GIE);
}//fin funcion servos


#pragma vector=TIMER0_A1_VECTOR
__interrupt void Timer_A (void){

  delay(1);
}
